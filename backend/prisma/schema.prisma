// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          Role      @default(STUDENT)
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  Courses  Course[]

  studentGroups Group[] @relation("StudentGroups")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @db.Text
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

enum Subject {
  GEOMETRY
  ALGEBRA
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Course {
  id         String     @id @default(cuid())
  creatorId  String     @map("user_id")
  name       String
  min_grade  Int
  max_grade  Int
  subject    Subject
  visibility Visibility @default(PRIVATE)
  color      String     @default("#000000")

  content Json? @map("content")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  groups  Group[] @relation("CourseGroups")
  groupId String?

  @@map("courses")
}

model Group {
  id    String @id @default(cuid())
  name  String
  color String @default("#000000")

  teacherId String @map("teacher_id")

  students User[]   @relation("StudentGroups")
  courses  Course[] @relation("CourseGroups")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}
